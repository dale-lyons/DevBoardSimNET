//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Assembler.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


#pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class AssemblerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, TEXT=12, NOT=13, END=14, ASSEMBLER_DIRECTIVE=15, REGISTER=16, 
		OPCODE=17, EXPROPS=18, NAME=19, NUMBER=20, COMMENT=21, EOL=22, WS=23;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_instruction = 2, RULE_opcode = 3, RULE_register_ = 4, 
		RULE_directive = 5, RULE_assemblerdirective = 6, RULE_lbl = 7, RULE_expressionlist = 8, 
		RULE_label = 9, RULE_expression = 10, RULE_arithop = 11, RULE_unaryop = 12, 
		RULE_argument = 13, RULE_dollar = 14, RULE_string = 15, RULE_name = 16, 
		RULE_number = 17, RULE_comment = 18;
	public static readonly string[] ruleNames = {
		"prog", "line", "instruction", "opcode", "register_", "directive", "assemblerdirective", 
		"lbl", "expressionlist", "label", "expression", "arithop", "unaryop", 
		"argument", "dollar", "string", "name", "number", "comment"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "','", "'('", "')'", "'['", "']'", "'/'", "'*'", "'+'", "'-'", 
		"'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"TEXT", "NOT", "END", "ASSEMBLER_DIRECTIVE", "REGISTER", "OPCODE", "EXPROPS", 
		"NAME", "NUMBER", "COMMENT", "EOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Assembler.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AssemblerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AssemblerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AssemblerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(AssemblerParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(AssemblerParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(AssemblerParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 39;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 38;
					line();
					}
					break;
				}
				State = 41;
				Match(EOL);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSEMBLER_DIRECTIVE) | (1L << OPCODE) | (1L << NAME) | (1L << COMMENT) | (1L << EOL))) != 0) );
			State = 46;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LblContext lbl() {
			return GetRuleContext<LblContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				{
				State = 48;
				lbl();
				}
				}
				break;
			case 2:
				{
				{
				State = 49;
				lbl();
				State = 50;
				instruction();
				}
				}
				break;
			case 3:
				{
				{
				State = 52;
				instruction();
				}
				}
				break;
			case 4:
				{
				{
				State = 53;
				label();
				State = 54;
				directive();
				}
				}
				break;
			case 5:
				{
				{
				State = 56;
				lbl();
				State = 57;
				directive();
				}
				}
				break;
			case 6:
				{
				{
				State = 59;
				directive();
				}
				}
				break;
			}
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 62;
				comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeContext opcode() {
			return GetRuleContext<OpcodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 4, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			opcode();
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__4) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << TEXT) | (1L << NOT) | (1L << REGISTER) | (1L << NAME) | (1L << NUMBER))) != 0)) {
				{
				State = 66;
				expressionlist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPCODE() { return GetToken(AssemblerParser.OPCODE, 0); }
		public OpcodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeContext opcode() {
		OpcodeContext _localctx = new OpcodeContext(Context, State);
		EnterRule(_localctx, 6, RULE_opcode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(OPCODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Register_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGISTER() { return GetToken(AssemblerParser.REGISTER, 0); }
		public Register_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_register_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterRegister_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitRegister_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegister_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Register_Context register_() {
		Register_Context _localctx = new Register_Context(Context, State);
		EnterRule(_localctx, 8, RULE_register_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(REGISTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblerdirectiveContext assemblerdirective() {
			return GetRuleContext<AssemblerdirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 10, RULE_directive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			assemblerdirective();
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__4) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << TEXT) | (1L << NOT) | (1L << REGISTER) | (1L << NAME) | (1L << NUMBER))) != 0)) {
				{
				State = 74;
				expressionlist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblerdirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSEMBLER_DIRECTIVE() { return GetToken(AssemblerParser.ASSEMBLER_DIRECTIVE, 0); }
		public AssemblerdirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblerdirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterAssemblerdirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitAssemblerdirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblerdirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblerdirectiveContext assemblerdirective() {
		AssemblerdirectiveContext _localctx = new AssemblerdirectiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_assemblerdirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(ASSEMBLER_DIRECTIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LblContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public LblContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lbl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterLbl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitLbl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLbl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LblContext lbl() {
		LblContext _localctx = new LblContext(Context, State);
		EnterRule(_localctx, 14, RULE_lbl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			label();
			State = 80;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterExpressionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitExpressionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 16, RULE_expressionlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			expression(0);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 83;
				Match(T__1);
				State = 84;
				expression(0);
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 18, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryopContext unaryop() {
			return GetRuleContext<UnaryopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(AssemblerParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithopContext arithop() {
			return GetRuleContext<ArithopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPROPS() { return GetToken(AssemblerParser.EXPROPS, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
			case TEXT:
			case REGISTER:
			case NAME:
			case NUMBER:
				{
				State = 93;
				argument();
				}
				break;
			case T__2:
				{
				State = 94;
				Match(T__2);
				State = 95;
				expression(0);
				State = 96;
				Match(T__3);
				}
				break;
			case T__4:
				{
				State = 98;
				Match(T__4);
				State = 99;
				expression(0);
				State = 100;
				Match(T__5);
				}
				break;
			case T__8:
			case T__9:
				{
				State = 102;
				unaryop();
				State = 103;
				expression(4);
				}
				break;
			case NOT:
				{
				State = 105;
				Match(NOT);
				State = 106;
				expression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 116;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 109;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 110;
						arithop();
						State = 111;
						expression(3);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 113;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 114;
						Match(EXPROPS);
						State = 115;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArithopContext : ParserRuleContext {
		public ArithopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterArithop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitArithop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithopContext arithop() {
		ArithopContext _localctx = new ArithopContext(Context, State);
		EnterRule(_localctx, 22, RULE_arithop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryopContext : ParserRuleContext {
		public UnaryopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterUnaryop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitUnaryop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryopContext unaryop() {
		UnaryopContext _localctx = new UnaryopContext(Context, State);
		EnterRule(_localctx, 24, RULE_unaryop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Register_Context register_() {
			return GetRuleContext<Register_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DollarContext dollar() {
			return GetRuleContext<DollarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 26, RULE_argument);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				number();
				}
				break;
			case REGISTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				register_();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127;
				dollar();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 128;
				name();
				}
				break;
			case TEXT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 129;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DollarContext : ParserRuleContext {
		public DollarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dollar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterDollar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitDollar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDollar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DollarContext dollar() {
		DollarContext _localctx = new DollarContext(Context, State);
		EnterRule(_localctx, 28, RULE_dollar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(AssemblerParser.TEXT, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 30, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(AssemblerParser.NAME, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 32, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AssemblerParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 34, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(AssemblerParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAssemblerListener typedListener = listener as IAssemblerListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssemblerVisitor<TResult> typedVisitor = visitor as IAssemblerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 36, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', '\x91', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x5', '\x2', '*', 
		'\n', '\x2', '\x3', '\x2', '\x6', '\x2', '-', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '.', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '?', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x42', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x46', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', 'N', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', 'X', '\n', '\n', '\f', '\n', '\xE', '\n', '[', '\v', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', 'n', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 'w', '\n', '\f', 
		'\f', '\f', '\xE', '\f', 'z', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x85', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x2', '\x3', '\x16', '\x15', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '\x2', '\x4', '\x3', '\x2', '\t', '\f', '\x3', '\x2', '\v', 
		'\f', '\x2', '\x93', '\x2', ',', '\x3', '\x2', '\x2', '\x2', '\x4', '>', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'G', '\x3', '\x2', '\x2', '\x2', '\n', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'K', '\x3', '\x2', '\x2', '\x2', '\xE', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'Q', '\x3', '\x2', '\x2', '\x2', '\x12', 'T', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\\', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'm', '\x3', '\x2', '\x2', '\x2', '\x18', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '}', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x86', '\x3', '\x2', '\x2', '\x2', ' ', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x8C', '\x3', '\x2', '\x2', '\x2', '&', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '(', '*', '\x5', '\x4', '\x3', '\x2', ')', '(', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', 
		'\x2', '+', '-', '\a', '\x18', '\x2', '\x2', ',', ')', '\x3', '\x2', '\x2', 
		'\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\a', '\x10', '\x2', '\x2', '\x31', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '?', '\x5', '\x10', '\t', '\x2', '\x33', 
		'\x34', '\x5', '\x10', '\t', '\x2', '\x34', '\x35', '\x5', '\x6', '\x4', 
		'\x2', '\x35', '?', '\x3', '\x2', '\x2', '\x2', '\x36', '?', '\x5', '\x6', 
		'\x4', '\x2', '\x37', '\x38', '\x5', '\x14', '\v', '\x2', '\x38', '\x39', 
		'\x5', '\f', '\a', '\x2', '\x39', '?', '\x3', '\x2', '\x2', '\x2', ':', 
		';', '\x5', '\x10', '\t', '\x2', ';', '<', '\x5', '\f', '\a', '\x2', '<', 
		'?', '\x3', '\x2', '\x2', '\x2', '=', '?', '\x5', '\f', '\a', '\x2', '>', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '>', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x36', '\x3', '\x2', '\x2', '\x2', '>', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '>', ':', '\x3', '\x2', '\x2', '\x2', '>', '=', '\x3', '\x2', 
		'\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x42', '\x5', '&', '\x14', '\x2', '\x41', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x5', '\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\x5', '\b', 
		'\x5', '\x2', '\x44', '\x46', '\x5', '\x12', '\n', '\x2', '\x45', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\a', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\x13', '\x2', 
		'\x2', 'H', '\t', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\x12', 
		'\x2', '\x2', 'J', '\v', '\x3', '\x2', '\x2', '\x2', 'K', 'M', '\x5', 
		'\xE', '\b', '\x2', 'L', 'N', '\x5', '\x12', '\n', '\x2', 'M', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\x11', '\x2', '\x2', 'P', 
		'\xF', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x5', '\x14', '\v', '\x2', 
		'R', 'S', '\a', '\x3', '\x2', '\x2', 'S', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'Y', '\x5', '\x16', '\f', '\x2', 'U', 'V', '\a', '\x4', '\x2', 
		'\x2', 'V', 'X', '\x5', '\x16', '\f', '\x2', 'W', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x5', 
		'\"', '\x12', '\x2', ']', '\x15', '\x3', '\x2', '\x2', '\x2', '^', '_', 
		'\b', '\f', '\x1', '\x2', '_', 'n', '\x5', '\x1C', '\xF', '\x2', '`', 
		'\x61', '\a', '\x5', '\x2', '\x2', '\x61', '\x62', '\x5', '\x16', '\f', 
		'\x2', '\x62', '\x63', '\a', '\x6', '\x2', '\x2', '\x63', 'n', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\a', '\x2', '\x2', '\x65', 
		'\x66', '\x5', '\x16', '\f', '\x2', '\x66', 'g', '\a', '\b', '\x2', '\x2', 
		'g', 'n', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x5', '\x1A', '\xE', 
		'\x2', 'i', 'j', '\x5', '\x16', '\f', '\x6', 'j', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\a', '\xF', '\x2', '\x2', 'l', 'n', '\x5', '\x16', '\f', 
		'\x5', 'm', '^', '\x3', '\x2', '\x2', '\x2', 'm', '`', '\x3', '\x2', '\x2', 
		'\x2', 'm', '\x64', '\x3', '\x2', '\x2', '\x2', 'm', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\f', '\x4', '\x2', '\x2', 'p', 'q', '\x5', '\x18', 
		'\r', '\x2', 'q', 'r', '\x5', '\x16', '\f', '\x5', 'r', 'w', '\x3', '\x2', 
		'\x2', '\x2', 's', 't', '\f', '\x3', '\x2', '\x2', 't', 'u', '\a', '\x14', 
		'\x2', '\x2', 'u', 'w', '\x5', '\x16', '\f', '\x4', 'v', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'v', 's', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'y', '\x17', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\t', '\x2', '\x2', '\x2', '|', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '}', '~', '\t', '\x3', '\x2', '\x2', '~', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x85', '\x5', '$', '\x13', 
		'\x2', '\x80', '\x85', '\x5', '\n', '\x6', '\x2', '\x81', '\x85', '\x5', 
		'\x1E', '\x10', '\x2', '\x82', '\x85', '\x5', '\"', '\x12', '\x2', '\x83', 
		'\x85', '\x5', ' ', '\x11', '\x2', '\x84', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x80', '\x3', '\x2', '\x2', '\x2', '\x84', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\a', '\r', '\x2', '\x2', '\x87', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\xE', '\x2', '\x2', '\x89', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x15', '\x2', 
		'\x2', '\x8B', '#', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', 
		'\x16', '\x2', '\x2', '\x8D', '%', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\a', '\x17', '\x2', '\x2', '\x8F', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\r', ')', '.', '>', '\x41', '\x45', 'M', 'Y', 'm', 'v', 'x', '\x84',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
